# Copy this file to /etc/nginx/conf.d and configure for your domain

# Microcaching global settings
fastcgi_cache_path /var/cache/nginx/fastcgi_cache levels=1:2 keys_zone=mysite:20m inactive=60m max_size=200m;

server {
        listen 443 default_server ssl http2; # All sites should be SSL
        server_name example.com www.example.com;

        access_log   /var/log/nginx/example.com.access.log main;
        error_log    /var/log/nginx/example.com.error.log;

        root /var/www/html/example.com;
        index index.php;

        # Comment out or delete any unneeded includes
        include nginx_configs/includes/robots.txt.inc;  # Only enable if site is non-public
        include nginx_configs/includes/performance.inc; # Speed optimizations
	include nginx_configs/includes/ssl_config.inc;	# SSL optimizations
	include	nginx_configs/includes/cloudflare.inc;  # Set real visitor IP address if using Cloudflare
	include nginx_configs/security/wordpress_security.inc;  # Recommended security rules
	include nginx_configs/includes/wp_microcaching.inc;  # Short duration caching setup
	include nginx_configs/includes/wp_subdir_multisite.inc;  # Subdirectory WP multisite rules
        include nginx_configs/includes/expires.inc;  # Browser caching rules

        # The block_xmlrpc.inc file requires the variables $allow_jetpack
        # (set in the server block), $is_xmlrpc_whitelist_ip (set in the http
        # block in nginx.inc), and $is_automattic_ip (set in the http block via
        # the file automatticips.inc. Please be sure these variables are all set
        # before including this file.  See the example nginx.inc for more info.)
       	include nginx_configs/security/block_xmlrpc.inc;


	# Create this file with the command:
	#     `openssl dhparam -out /etc/nginx/dh4096.pem 4096`
	# Careful! It will take many minutes and max your CPU!
        ssl_dhparam /etc/nginx/dh4096.pem;

        ssl_certificate    /etc/letsencrypt/live/example.com/fullchain.pem;
        ssl_certificate_key    /etc/letsencrypt/live/example.com/privkey.pem;

        #define cache valid time for microcaching (use with nginx_configs/includes/wp_microcaching.inc)
        fastcgi_cache_valid any 90s;

        # Jetpack connects over xmlrpc.php. If we include block_xmlrpc.inc
        # above, Jetpack will be unable to connect without extra logic. This
        # variable controls whether we allow connections to xmlrpc.php for 
        # Jetpack or not. Valid settings for this variable are:
        #       0  = You are not using Jetpack
        #       ua = You are using Jetpack and want to match the 
        #            Jetpack user-agent to allow access. This
        #            is the preferred method and is most reliable while
        #            providing a reasonable level of protection.
        #       ip = You are using Jetpack and wish to use the Automattic
        #            (owner of Jetpack) IP address range AND the user
        #            agent as the mechanisms to allow access to 
        #            xmlrpc.php. This is the most secure method, but 
        #            could break your connection to Jetpack at any time 
        #            due to a change of IP address by Automattic.  
        #            For discussion and more info, see 
        #            https://github.com/Automattic/jetpack/issues/1719
        set $allow_jetpack 0;

        location / {
                try_files $uri $uri/ /index.php?$args ;
        }

	location ~ \.php$ {
		include nginx_configs/includes/php.inc;
	}

        # This should match upload_max_filesize in php.ini. Note
        # upload_max_filesize can get overwritten in a number of places,
        # including the actual PHP code or the PHP-FPM www.conf file.
        client_max_body_size 20M;
}

server {
        listen 80;
        server_name example.com www.example.com;

        rewrite (.*) https://example.com$1 permanent;

}
