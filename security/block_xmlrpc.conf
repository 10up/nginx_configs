location ~* xmlrpc.php$ {

	# Identify Jetpack by user agent. A more secure way is by IP address.
	# See below to understand why this is the preferred method.
	set $is_jetpack_ua 0;
        if ($http_user_agent = "Jetpack by WordPress.com" ) {
                set $is_jetpack_ua 1;
        }

	# Combine variables so we can check these with one if statment (no nested ifs)
	$do_block_xmlrpc = "${allow_jetpack}${allow_xmlrpc}";

	# If this is a whitelisted IP, no need for any other rule, just allow it
	if ( $allow_xmlrpc = '1' )
	{
		# Parse the PHP
		include nginx_configs/includes/php.conf;		
	}

	# Block everything if Jetpack isn't present and not a whitelisted IP
	if ( $do_bock_xmlrpc = '00') { deny all; }

	set $do_allow_xmlrpc "${allow_jetpack}${is_jetpack_ua}${allow_xmlrpc}";

	# Not the Jetpack UA and no additional whitelisted IPs, then block
	if ( $do_allow_xmlrpc ~ "*00" ) { deny all; }

	# Allow Jetpack UA, matches Jetpack UA, no additional whitelisted IPs. Allow
	if ( do_allow_xmlrpc = 'ua10' )
	{
		# Parse the PHP
		include nginx_configs/includes/php.conf;
	}

	# Allow Jetpack by UA and IP, matches Jetpack UA, no additional whitelisted IPs. Check IPs
	if ( do_allow_xmlrpc = 'ip10' )
	{
		# Use the Automattic IP range to restrict access to XMLRPC if Jetpack is present.  This is the most secure method, but must
        	# be frequently updated with new IP addresses.  These can be found at http://whois.arin.net/rest/org/AUTOM-93/nets.  The ticket
        	# https://github.com/Automattic/jetpack/issues/1719 contains a discussion of why this is dangerous.
		include nginx_configs/security/automatticips.conf;
        	allow 127.0.0.1;
        	deny all;

		# Parse the PHP
		include nginx_configs/includes/php.conf;
	}

}
